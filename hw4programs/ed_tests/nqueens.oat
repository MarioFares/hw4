global n = 8;

void print_sol(int[][] board) {
    for (var i = 0; i < n; i = i + 1;) { 
        for (var j = 0; j < n; j = j + 1;) {
            print_int(board[i][j]); 
        }
        print_string("\n"); 
    } 
    return;
} 

bool check_square(int[][] board, int row, int col) { 
    for (var i = 0; i < col; i = i + 1;) {
        if (board[row][i] > 0) {
            return false; 
        }
    }
        
    for (var i = row, var j = col; i >= 0 & j >= 0; i = i - 1;) {
        if (board[i][j] > 0) {
            return false; 
        }
        j = j - 1;
    } 
    for (var i = row, var j = col; j >= 0 & i < n; i = i + 1;)  {
        if (board[i][j] > 0) {
            return false; 
        }
        j = j - 1;
    }
    return true; 
} 

bool nqhelper(int[][] board, int col) { 
    if (col >= n) {
        return true; 
    }
   
    for (var i = 0; i < n; i = i + 1;) { 
        if (check_square(board, i, col)) { 
            board[i][col] = 1; 
            if (nqhelper(board, col + 1))  {
                return true; 
            }

            board[i][col] = 0;
        } 
    } 
   
    return false; 
} 

int program(int argc, string[] argv) { 
    var board = new int[][]{
        new int[]{0,0,0,0,0,0,0,0}, 
        new int[]{0,0,0,0,0,0,0,0}, 
        new int[]{0,0,0,0,0,0,0,0}, 
        new int[]{0,0,0,0,0,0,0,0}, 
        new int[]{0,0,0,0,0,0,0,0}, 
        new int[]{0,0,0,0,0,0,0,0}, 
        new int[]{0,0,0,0,0,0,0,0}, 
        new int[]{0,0,0,0,0,0,0,0}}; 
 
    if (!nqhelper(board, 0)) { 
        print_string("Solution does not exist"); 
        return 0; 
    } 

    print_sol(board);
  
    return 0; 
} 