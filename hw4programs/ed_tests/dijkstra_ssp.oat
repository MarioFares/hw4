global max = 9999999;

int min_distance(int verts, int[] dists, bool[] shortest_path) {
    var min = max;
    var min_idx = 0;

    for (var i = 0; i < verts; i = i + 1;) {
        if (!shortest_path[i] & dists[i] < min) {
            min = dists[i];
            min_idx = i;
        }
    }

    return min_idx;
}

int[] dijkstra(int[][] graph, int verts, int src) {
    var dists = new int[verts];
    var shortest_path = new bool[verts];

    for (var i = 0; i < verts; i = i + 1;) {
        dists[i] = max;
        shortest_path[i] = false;
    }

    dists[src] = 0;
    var count = 0;

    while (count < verts - 1) {
        var min_idx = min_distance(verts, dists, shortest_path);
        var min_dist = dists[min_idx];

        shortest_path[min_idx] = true;

        for (var i = 0; i < verts; i = i + 1;) {
            if (!shortest_path[i] & graph[min_idx][i] != 0) {
                if (min_dist + graph[min_idx][i] < dists[i]) {
                    dists[i] = min_dist + graph[min_idx][i];
                }
            }
        }

        count = count + 1;
    }

    return dists;
}

 
int program(int argc, string[] argv) {
    var verts = 9;
    var src = 0;

    var graph = new int[][]{
        new int[]{0, 4, 0, 0, 0, 0, 0, 8, 0},
        new int[]{4, 0, 8, 0, 0, 0, 0, 11, 0},
        new int[]{0, 8, 0, 7, 0, 4, 0, 0, 2},
        new int[]{0, 0, 7, 0, 9, 14, 0, 0, 0},
        new int[]{0, 0, 0, 9, 0, 10, 0, 0, 0},
        new int[]{0, 0, 4, 14, 10, 0, 2, 0, 0},
        new int[]{0, 0, 0, 0, 0, 2, 0, 1, 6},
        new int[]{8, 11, 0, 0, 0, 0, 1, 0, 7},
        new int[]{0, 0, 2, 0, 0, 0, 6, 7, 0}
    };

    var sol = new int[verts];
    sol = dijkstra(graph, verts, src);

    print_string("v:dist(v, src), ");
    for(var i = 0; i < verts; i = i + 1;)
    {
        print_int(i);
        print_string(":");
        print_int(sol[i]);
        if (i < verts - 1) {
            print_string(", ");
        }
    }

    return 0;
}
